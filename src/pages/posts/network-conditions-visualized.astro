---
import BlogPost from '../../layouts/BlogPost.astro';
import CodeBlock from "../../components/CodeBlock.astro";
import POST_METADATA from "./network-conditions-visualized.json";

import Visualizer from "../../components/blogs/network-conditions-visualized/Visualizer.svelte";
import SendNetworkLogsVisualizer from "../../components/blogs/network-conditions-visualized/templates/SendNetworkLogsVisualizer.svelte";
import NoSmoothingStutteringComparison from "../../components/blogs/network-conditions-visualized/templates/NoSmoothingStutteringComparison.svelte";
import PacketLossPingVisualization from "../../components/blogs/network-conditions-visualized/templates/PacketLossPingVisualization.svelte";
import JitterVisualization from "../../components/blogs/network-conditions-visualized/templates/JitterVisualization.svelte";
import SmoothingStutteringComparison from "../../components/blogs/network-conditions-visualized/templates/SmoothingStutteringComparison.svelte";
import PlayerMarker from "../../components/blogs/network-conditions-visualized/PlayerMarker.svelte";

let smoothingImplementation = `
let timeBetween = this.#positionInfo.last.receivedAt - this.#positionInfo.second.receivedAt;

// Fixes 0 division error
if (timeBetween === 0) {
    return this.#positionInfo.second.position;
}

let offsetStop = this.#positionInfo.last.receivedAt + timeBetween;
let offsetStart = this.#positionInfo.second.receivedAt + timeBetween;

let currentTime = Date.now();

let currentRelativeToStart = currentTime - offsetStart;
let progressFraction = currentRelativeToStart / timeBetween;
    
if (progressFraction > 1 && !this.#config.smoothing.estimatePast) {
    return this.#positionInfo.last.position;
}
let lastPosition = this.#positionInfo.second.position;
let newPosition = this.#positionInfo.last.position;

return {
    x: lastPosition.x + ((newPosition.x - lastPosition.x) * progressFraction),
    y: lastPosition.y + ((newPosition.y - lastPosition.y) * progressFraction)
};
`.trim();
---
<BlogPost data={POST_METADATA}>
    <p>
        In the <a href="https://discord.gg/vailvr">VAIL VR discord</a> I often see people complain about network conditions and just blame it on ping to the point where people are blaming frame drops on ping.
        This annoys me <i>slightly</i> so I've decided to bite the bullet and write some frontend code to visualize what the different network conditions <i>actually</i> does to your gameplay.
    </p>
    <h2>Lets take a step back</h2>
    <p>
        Right so as I will be sharing this in the <a href="https://discord.gg/vailvr">VAIL VR discord</a> whenever someone who don't know how games networking works complains about something and blames it on netcode or just tells the devs to "just magically fix netcode"<a href="#footnote-pls-fix-netcode">¹</a>,
        I need to consider that they probably aren't massive networking nerds. So lets go through some basic stuff:<br/>
        Your position isn't magically sent smooth to all the other players for performance reasons. It is instead sent as individual position ticks at a fixed tick rate<a href="#footnote-what-is-tickrate">²</a>
    </p>
    <SendNetworkLogsVisualizer client:visible client:only />
    <p>
        The <PlayerMarker color="red" /> local player is smooth as we know what the position is every frame.
        This is different for the <PlayerMarker color="blue" /> remote player, which will only be updated once per tick.
    </p>
    <NoSmoothingStutteringComparison client:visible client:only /> 
    <p>
        Vail runs at 60<a href="#footnote-vails-tickrate">³</a> ticks per second, which does look fine enough in the ideal conditions we have right now.
        But unfortunately data doesn't magically instantly transport to anywhere in the world, so we have things like ping and packetloss.
    </p>
    <PacketLossPingVisualization client:visible client:only />
    <p>
        Now remember that ping here just isn't your ping, but its also the ping from you -&gt; the gameserver -&gt; other player, so for a normal "low ping" game the ping would be around 50ms per player, so you would have 100ms ping total.
        But sadly, most games are very high ping, usually with 120ms ping per player, making it 240ms.
        
        Anyways ping isn't just a "static" time, there is also jitter which is a part of your ping which is random.
        My super simplified version of jitter just does
        <CodeBlock language="python" code="ping = static_ping + (jitter * random.random())" />
        which isn't perfect, but it should be accurate enough for these visualizations.
    </p>
    <JitterVisualization client:visible client:only />
    <p>
        It's quite hard to get some good reference numbers for jitter as this is something that doesn't show in game in VAIL, however I would guess a normal game for me would be around 30ms jitter. Remember that jitter is both from you -&gt; server and server -&gt; other players.

        Anyway these are most of the conditions which makes our experience <i>worse</i>, but how do game devs make it better?
        Well the first option would be to add smoothing.
    </p>
    <SmoothingStutteringComparison client:visible client:only />
    <p>
        This hides the ticks and jitter pretty well and allows you to use a lot lower tick rate while still maintaining smooth gameplay.
        This ofcourse has it's own issues like making the positions delayed, but oh whelp it's worth it.

        My smoothing implementation is quite simple and probably not as sophisticated as the one used by VAIL and other games.
    </p>
    <CodeBlock code={smoothingImplementation} language="js" />
    <p>
        My implementation also supports extrapolation<a href="footnote-what-is-extrapolation">⁴</a> continuing estimating the position past what we know, which may work well in environments with higher packet loss.
        This is however not used by games like VAIL as they "prefer what you see be tightly coupled to the raw data/updates"<a href="#footnote-why-vail-doesnt-use-extrapolation">⁵</a>
    </p>
    <h2>Alright, let's get into how this affects gameplay</h2>
    <h2>Footnotes</h2>
    <ol class="footnotes">
        <li id="footnote-pls-fix-netcode"><a href="https://discord.com/channels/710682414225162301/1223413597435072653">cough cough</a></li>
        <li id="footnote-what-is-tickrate">Tick rate is how many times a spesific action should be ran. Minecraft for example does all its game logic 20 times per second.</li>
        <li id="footnote-vails-tickrate"><a href="https://discord.com/channels/710682414225162301/1223413597435072653/1223982256431824986">VAIL's tickrate confirmed by aoud</a></li>
        <li id="footnote-what-is-extrapolation"><a href="https://en.wikipedia.org/wiki/Extrapolation">Extrapolation explained by WikiPedia</a></li>
        <li id="footnote-why-vail-doesnt-use-extrapolation"><a href="https://discord.com/channels/710682414225162301/1223413597435072653/1223588169409105950">Why VAIL doesn't use extrapolation</a></li>
    </ol>
</BlogPost>
